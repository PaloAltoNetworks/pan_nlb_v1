{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates an AWS Network Load balancer, which multiplexes traffic to registered scaled out back end web servers",
  "Parameters": {
    "NLBName": {
      "Type" : "String",
      "Description": "Enter the name of the External Classic Load Balancer",
      "Default": "prot-nlb",
      "MinLength" : "3",
      "MaxLength" : "12"
    },
    "NLBARN": {
      "Type" : "String",
      "Description": "Enter the name of the External Classic Load Balancer",
      "Default": "prot-nlb",
      "MinLength" : "3",
      "MaxLength" : "150"
    },
    "QueueURL": {
      "Type" : "String",
      "Description": "Enter the name of the External Classic Load Balancer",
      "MinLength" : "3",
      "MaxLength" : "165"
    },
    "TableName": {
      "Type" : "String",
      "Default": "nlb_db_tbl",
      "Description": "Enter the name of the database table",
      "MinLength" : "3",
      "MaxLength" : "65"
    },
    "S3BucketName": {
      "Type" : "String",
      "Default": "nlb-template",
      "Description": "Enter the ARN of the role to be used for the deployment",
      "MinLength" : "3",
      "MaxLength" : "75"
    },
    "S3ObjectName": {
      "Type" : "String",
      "Default": "nlb.zip",
      "Description": "Enter the ARN of the role to be used for the deployment",
      "MinLength" : "3",
      "MaxLength" : "75"
    }
  },
  "Mappings" : {
    "Constants": {
      "S3URL": {
         "URL1": "https://s3.amazonaws.com"
      },
      "S3MainTpl": {
         "TPL1": "firewall.template"
      }
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
        "ParameterLabels" : {
            "NLB ARN": {"Ref": "NLBARN"},
            "NLB Name": {"Ref": "NLBNAME"},
            "Queue URL": {"Ref": "QueueURL"},
            "Table Name": {"Ref": "TableName"},
            "Lambda S3 Bucket Name": {"Ref": "S3BucketName"},
            "Lambda S3 Object Name": {"Ref": "S3ObjectName"}
      }
    }
  },
  "Resources": {
    "LambdaExecutionRole" : {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [ {
                 "Effect": "Allow",
                 "Principal": {
                 "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              } ]
            },
            "Path":"/",
            "Policies": [ {
              "PolicyName": "LambdaExecutionRolePolicy",
              "PolicyDocument":{
                "Version": "2012-10-17",
                "Statement": [
                {
                    "Effect": "Allow",
                    "Action": "s3:ListBucket",
                    "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", "nlb-template", "/*" ] ] }
                },
                {
                    "Effect": "Allow",
                    "Action": "s3:GetObject",
                    "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", "nlb-template", "/*" ] ] }
                },
            {
                "Effect": "Allow",
                "Action": [
                    "events:*"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "cloudwatch:*"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "lambda:AddPermission",
                    "lambda:CreateEventSourceMapping",
                    "lambda:CreateFunction",
                    "lambda:DeleteEventSourceMapping",
                    "lambda:DeleteFunction",
                    "lambda:GetEventSourceMapping",
                    "lambda:ListEventSourceMappings",
                    "lambda:RemovePermission",
                    "lambda:UpdateEventSourceMapping",
                    "lambda:UpdateFunctionCode",
                    "lambda:UpdateFunctionConfiguration",
                    "lambda:GetFunction",
                    "lambda:ListFunctions"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:SendMessage",
                    "sqs:SetQueueAttributes",
                    "sqs:PurgeQueue"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "elasticloadbalancing:AddTags",
                    "elasticloadbalancing:AttachLoadBalancerToSubnets",
                    "elasticloadbalancing:ConfigureHealthCheck",
                    "elasticloadbalancing:DescribeInstanceHealth",
                    "elasticloadbalancing:DescribeLoadBalancerAttributes",
                    "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                    "elasticloadbalancing:DescribeLoadBalancerPolicies",
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "elasticloadbalancing:DescribeTags",
                    "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                    "elasticloadbalancing:ModifyLoadBalancerAttributes",
                    "elasticloadbalancing:RemoveTags"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "iam:PassRole",
                    "iam:GetRole"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
              "Effect": "Allow",
              "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": ["cloudformation:DescribeStacks"],
              "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutDestination",
                    "logs:PutDestinationPolicy",
                    "logs:PutLogEvents",
                    "logs:PutMetricFilter"
                ],
                "Resource": [
                    "*"
                ]
            },
            {
                "Effect": "Allow",
                "Action": [
                    "dynamodb:CreateTable",
                    "dynamodb:DeleteItem",
                    "dynamodb:DeleteTable",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem"
                ],
                "Resource": [
                    "*"
                ]
            }
            ]
          }}]}
    },
    "NLBDeployerLambda" : {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "nlb_deployer.nlb_deploy_handler",
            "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
            "Code": {
                "S3Bucket": "nlb-template",
                "S3Key": "nlb.zip"
            },
        "Runtime": "python2.7",
        "Timeout": "300"
      },
      "DependsOn": [ "LambdaExecutionRole" ]
    },
    "LambdaCustomResource": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Version" : "1.0",
        "DependsOn": ['NLBDeployerLambda'],
         "Properties" : {
             "ServiceToken": { "Fn::GetAtt" : ["NLBDeployerLambda", "Arn"] },
             "StackName": {"Ref": "AWS::StackName"},
             "Region": {"Ref": "AWS::Region"},
             "table_name": {"Ref": "TableName"},
             "NLB-ARN": {"Ref": "NLBARN"},
             "NLB-NAME": {"Ref": "NLBName"},
             "LambdaExecutionRole": {"Ref": "LambdaExecutionRole"},
             "S3BucketName": {"Ref": "S3BucketName"},
             "S3ObjectName": {"Ref": "S3ObjectName"},
             "QueueURL": {"Ref": "QueueURL"}
         }
    }
  }
}