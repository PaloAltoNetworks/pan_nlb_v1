{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates an AWS Network Load balancer, which multiplexes traffic to registered scaled out back end web servers",
  "Parameters": {
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.large",
        "m3.xlarge",
        "c4.2xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName" : {
       "Description" : "Amazon EC2 Key Pair",
       "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "SSHLocation" : {
      "Description" : "Restrict SSH access to the VM-Series firewall (by default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "VpcAzs": {
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Description": "Enter the list of Availability Zones (Based on Number of AZs above). \n
                      Required for the deployment of the backend application"
    },
    "VPCCIDR": {
      "Type": "String",
      "Default": "192.168.0.0/16",
      "Description": "Enter the VPC CIDR that you want to use",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "VPCID": {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "VPC ID to be deployed into"
    },
    "SubnetIDs": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Enter the Subnet IDs that are to be leveraged"
    },
    "NLBName": {
      "Type" : "String",
      "Description": "Enter the name to associate with the NLB",
      "Default": "prot-nlb",
      "MinLength" : "3",
      "MaxLength" : "120"
    },
    "QueueURL": {
      "Type" : "String",
      "Description": "Enter the URL of the Queue to send NLB updates to",
      "MinLength" : "3",
      "MaxLength" : "120"
    },
    "S3BucketName": {
      "Type" : "String",
      "Description": "Enter the name S3 Bucket Name which contains the template and lambda code",
      "MinLength" : "3",
      "MaxLength" : "120"
    },
    "NestedLambdaTemplateName": {
      "Type" : "String",
      "Description": "Enter the name of the S3 object which contains the lambda template",
      "MinLength" : "3",
      "MaxLength" : "120"
    },
    "LambdaZipFileName": {
      "Type" : "String",
      "Description": "Enter the name of the S3 object which contains the lambda function code",
      "MinLength" : "3",
      "MaxLength" : "120"
    },
    "TableName": {
      "Type" : "String",
      "Description": "Enter the name of the backend DB Table",
      "MinLength" : "3",
      "MaxLength" : "120",
      "Default": "nlb_db_tbl"
    },
  },
  "Mappings" : {
    "Constants": {
      "S3URL": {
         "URL1": "https://s3.amazonaws.com"
      },
      "S3MainTpl": {
         "TPL1": "nlb1-template/pan_nlb_lambda.template"
      }
    },
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-1ccae774", "HVM64" : "ami-1ecae776", "HVMG2" : "ami-8c6b40e4"},
      "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-c55673a0", "HVMG2" : "NOT_SUPPORTED"},
      "us-west-2"        : {"PV64" : "ami-ff527ecf", "HVM64" : "ami-e7527ed7", "HVMG2" : "ami-abbe919b"},
      "us-west-1"        : {"PV64" : "ami-d514f291", "HVM64" : "ami-d114f295", "HVMG2" : "ami-f31ffeb7"},
      "eu-west-1"        : {"PV64" : "ami-bf0897c8", "HVM64" : "ami-a10897d6", "HVMG2" : "ami-d5bc24a2"},
      "eu-central-1"     : {"PV64" : "ami-ac221fb1", "HVM64" : "ami-a8221fb5", "HVMG2" : "ami-7cd2ef61"},
      "ap-northeast-1"   : {"PV64" : "ami-27f90e27", "HVM64" : "ami-cbf90ecb", "HVMG2" : "ami-6318e863"},
      "ap-southeast-1"   : {"PV64" : "ami-acd9e8fe", "HVM64" : "ami-68d8e93a", "HVMG2" : "ami-3807376a"},
      "ap-southeast-2"   : {"PV64" : "ami-ff9cecc5", "HVM64" : "ami-fd9cecc7", "HVMG2" : "ami-89790ab3"},
      "sa-east-1"        : {"PV64" : "ami-bb2890a6", "HVM64" : "ami-b52890a8", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-fa39abc3", "HVM64" : "ami-f239abcb", "HVMG2" : "NOT_SUPPORTED"},
      "eu-west-1"        : {"PV64" : "ami-07df0a7e", "HVM64" : "ami-acd005d5", "HVMG2" : "NOT_SUPPORTED"},
      "eu-west-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-1a7f6d7e", "HVMG2" : "NOT_SUPPORTED"},
      "ca-central-1"     : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-fd55ec99", "HVMG2" : "NOT_SUPPORTED"},
      "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-4fc58420", "HVMG2" : "NOT_SUPPORTED"},
      "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-249b554a", "HVMG2" : "NOT_SUPPORTED"},
      "sa-east-1"        : {"PV64" : "ami-b4344bd8", "HVM64" : "ami-f1344b9d", "HVMG2" : "NOT_SUPPORTED"}
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
        "ParameterGroups" : [
            {
                "Label": {"default": "VPC Section"},
                "Parameters": ["VpcAzs", "VPCCIDR", "VPCID", "SubnetIDs"]
            },
            {
                "Label": {"default": "NLB Section"},
                "Parameters": ["NLBName"]
            },
            {
                "Label": {"default": "Lambda Section"},
                "Parameters": [ "S3BucketName", "NestedLambdaTemplateName", "LambdaZipFileName",
                                "QueueURL", "TableName"
                              ]
            },
            {
                "Label": {"default": "Application Section"},
                "Parameters": ["InstanceType"]
            },
            {
                "Label": {"default": "Access Section"},
                "Parameters": ["KeyName", "SSHLocation"]
            }
        ],
        "ParameterLabels" : {
            "VPCName": {"default": "VPC Name:"},
            "VPCCIDR": {"default": "CIDR Block for the VPC:"},
            "MgmtSubnetIpBlocks": {"default": "Management Subnet CIDR Block:"},
            "InstanceType": {"default": "Instance Type of Web Servers behind ILB:"},
            "KeyName": {"default": "Key pair:"},
            "SSHLocation": {"default": "SSH From:"},
            "VpcAzs": {"default": "Select list of AZ:"},
            "NumberOfAZs": {"default": "Number of AZ for deployment:"},
            "ScalingParameter": {"default": "Choose your Scaling Parameter:"},
            "ScalingPeriod": {"default": "Choose time in seconds for Scaling Period:"},
            "MinInstancesASG": {"default": "Minimum VM-Series Instances:"},
            "MaximumInstancesASG": {"default": "Maximum VM-Series Instances:"},
            "ScaleUpThreshold": {"default": "ScaleUp threshold value in percentage/value:"},
            "ScaleDownThreshold": {"default": "ScaleDown threshold value in percentage/value:"}
      }
    }
  },
  "Resources": {
    "NetworkLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId" : { "Ref" : "VPCID" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "PublicLoadBalancerSecurityGroup" ] ] } } ],
        "SecurityGroupIngress" : [
                {
                    "IpProtocol" : "-1",
                    "FromPort" : "80",
                    "ToPort" : "80",
                    "CidrIp" : "0.0.0.0/0"}
         ],
        "SecurityGroupEgress" : [
                {
                    "IpProtocol" : "-1",
                    "FromPort" : "80",
                    "ToPort" : "80",
                    "CidrIp" : "0.0.0.0/0"
                }
        ]
      }
    },
    "NetworkLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : { "Ref" : "NLBName" },
        "Subnets" : [ { "Fn::Select" : [ "0", {"Ref" : "SubnetIDs"} ] }, { "Fn::Select" : [ "1", {"Ref" : "SubnetIDs"} ] } ],
        "Scheme" : "internal",
        "Type": "network"
      },
      "DependsOn": [ "NetworkLoadBalancerSecurityGroup" ]
    },
    "WebServerLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "httpd" : []
              }
            },

            "files" : {
              "/var/www/html/index.html" : {
                "content" : { "Fn::Join" : ["\n", [
                  "<img src=\"https://www.paloaltonetworks.com/content/dam/pan/en_US/images/logos/brand/pan-logo-badge-blue-medium-kick-up.png\" alt=\"VM-Series CloudFormation\ width=\"200\"/>",
                  "<h1>Congratulations, you have successfully launched VM-Series ASG CloudFormation. This file is coming from Webserver Region:", { "Ref" : "AWS::Region" }, "</h1>",
                  "<h1>StackID: ", { "Ref" : "AWS::StackId" }, "</h1>",
                  "<h1>StackName: ", { "Ref" : "AWS::StackName" }, "</h1>",
                  "<h1>AccountID: ", { "Ref" : "AWS::AccountId" }, "</h1>",
                  "<h1>This templates creates - VPC, Subnets, Route Tables, Webservers ASG, Lambda Infra </h1>"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress" : "true",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroups" : [ { "Ref" : "WebServerSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerLaunchConfig",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal completion\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "  --stack ", { "Ref": "AWS::StackName" },
             "  --resource WebServerGroup" ,
             "  --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription" : "Allow access from HTTP and SSH traffic",
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "WebServerSecurityGroup" ] ] } } ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": { "Ref" : "SSHLocation" }
          },
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": { "Ref" : "VPCCIDR" }
          }
        ]
     }
    },
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : [ "WebServerLaunchConfig" ],
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::Select" : [ "0", {"Ref" : "VpcAzs"} ] }, { "Fn::Select" : [ "1", {"Ref" : "VpcAzs"} ] }],
        "LaunchConfigurationName" : { "Ref" : "WebServerLaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "6",
        "TargetGroupARNs" : [ { "Ref" : "WebServerTargetGroup" } ],
        "VPCZoneIdentifier": [ { "Fn::Select" : [ "0", {"Ref" : "SubnetIDs"} ] }, { "Fn::Select" : [ "1", {"Ref" : "SubnetIDs"} ] } ],
        "Tags": [
                {
                    "ResourceType": "auto-scaling-group",
                    "ResourceId": "WebServerGroup",
                    "PropagateAtLaunch": true,
                    "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "WebServerGroup" ] ] },
                    "Key": "Name"
                }
        ]
      }
    },
    "WebServerTargetGroup": {
       "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
       "Properties" : {
             "Name" :{ "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "WebServerTargetGroup" ] ] },
             "Port" : "80",
             "Protocol" : "TCP",
             "UnhealthyThresholdCount" : "3",
             "VpcId" : { "Ref" : "VPCID" }
       }
    },
    "WebServerListener": {
       "Type" : "AWS::ElasticLoadBalancingV2::Listener",
       "Properties" : {
         "DefaultActions" : [{
           "Type": "forward",
           "TargetGroupArn": { "Ref": "WebServerTargetGroup" }
            }],
         "LoadBalancerArn" : {"Ref" : "NetworkLoadBalancer"},
         "Port" : "80",
         "Protocol" : "TCP"
        },
        "DependsOn": ["WebServerTargetGroup", "NetworkLoadBalancer"]
    },
    "DeployNLBLambda": {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
            "TemplateURL" : { "Fn::Join": [ "/", [ { "Fn::FindInMap" : [ "Constants", "S3URL", "URL1" ]},
                                { "Ref": "S3BucketName" }, { "Ref": "NestedLambdaTemplateName" } ] ] },
            "Parameters" : {
               "TableName": {"Ref": "TableName"},
               "NLBARN": {"Ref": "NetworkLoadBalancer"},
               "NLBName": {"Ref": "NLBName"},
               "S3BucketName": {"Ref": "S3BucketName"},
               "S3ObjectName": {"Ref": "LambdaZipFileName"},
               "QueueURL": {"Ref": "QueueURL"}
            }
      },
      "DependsOn": [ "NetworkLoadBalancer", "WebServerLaunchConfig", "WebServerListener" ]
    }
  }
}
